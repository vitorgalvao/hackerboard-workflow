#!/usr/bin/osascript -l JavaScript

function envVar(varName) {
  return $.NSProcessInfo
    .processInfo
    .environment
    .objectForKey(varName).js
}

function request(url) {
  const queryURL = $.NSURL.URLWithString(url)
  const requestData = $.NSData.dataWithContentsOfURL(queryURL)
  const requestString = $.NSString.alloc.initWithDataEncoding(requestData, $.NSUTF8StringEncoding).js
  return requestString
}

function run(argv) {
  // Configuration
  const commentsMain = envVar("default_comments") === "1"
  const frontpageNews = envVar("frontpage") === "1"
  const ignoreKeywords = envVar("ignore_keywords").split("\n").flatMap(line => line === "" ? [] : line.toLowerCase())

  // Grab items
  const hnItems = JSON.parse(request(`https://hn.algolia.com/api/v1/${argv[0]}`))["hits"]

  // If no matches, exit early
  if (hnItems.length === 0) return JSON.stringify({ items: [{ title: "No stories found", valid: false }]})

  // Build Items
  const sfItems = hnItems.flatMap(item => {
    const title = item["title"]
    const commentsPage = `https://news.ycombinator.com/item?id=${item["story_id"]}`
    const storyPage = item["url"] || commentsPage
    const altMessage = commentsMain ? "Open story website" : "Open comments thread"
    const mainURL = commentsMain ? commentsPage : storyPage
    const altURL = commentsMain ? storyPage : commentsPage
    const createdAt = frontpageNews ? "" : `${item["created_at"].replace(/T.*/, "")} · `

    // Skip ignored
    if (ignoreKeywords.some(line => title.toLowerCase().includes(line) || storyPage.includes(line))) return []

    return {
      title: title,
      subtitle: `${item["points"]} points · ${item["num_comments"]} comments · ${createdAt}${storyPage}`,
      arg: mainURL,
      quicklookurl: storyPage,
      match: `${item["title"]} ${storyPage}`,
      mods: { alt: { subtitle: altMessage, arg: altURL }}
    }
  })

  // Output JSON
  const sfObject = { variables: { search_query: envVar("search_query") }, items: sfItems }
  if (frontpageNews) sfObject["cache"] = { seconds: 3600 }
  return JSON.stringify(sfObject)
}
