#!/usr/bin/osascript -l JavaScript

function envVar(varName) {
  return $.NSProcessInfo
    .processInfo
    .environment
    .objectForKey(varName).js
}

function request(url) {
  const queryURL = $.NSURL.URLWithString(url)
  const requestData = $.NSData.dataWithContentsOfURL(queryURL)
  const requestString = $.NSString.alloc.initWithDataEncoding(requestData, $.NSUTF8StringEncoding).js
  return requestString
}

function run(argv) {
  // Configuration
  const commentsMain = envVar("default_comments") === "1"
  const keepCache = envVar("keep_cache") === "1"

  // Grab items
  const hnItems = JSON.parse(request(`https://hn.algolia.com/api/v1/${argv[0]}`))["hits"]

  // If no matches, exit early
  if (hnItems.length === 0) return JSON.stringify({ items: [{ title: "No stories found", valid: false }]})

  // Build Items
  const sfItems = hnItems.map(item => {
    const storyPage = item["url"]
    const commentsPage = `https://news.ycombinator.com/item?id=${item["story_id"]}`
    const altMessage = commentsMain ? "Open story website" : "Open comments thread"
    const mainURL = commentsMain ? commentsPage : storyPage
    const altURL = commentsMain ? storyPage : commentsPage

    return {
      title: item["title"],
      subtitle: `${item["points"]} points · ${item["num_comments"]} comments · ${storyPage}`,
      arg: mainURL,
      match: `${item["title"]} ${storyPage}`,
      mods: { alt: { subtitle: altMessage, arg: altURL }}
    }
  })

  // Output JSON
  const sfObject = { items: sfItems }
  if (keepCache) sfObject["cache"] = { seconds: 3600 }
  return JSON.stringify(sfObject)
}
